name: Create Signed Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v7.1.5.0)'
        required: true
        default: 'v7.1.5.0'

permissions:
  contents: write
  
jobs:
  create-signed-release:
    name: Create Signed Release
    runs-on: windows-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Get version
      id: version
      shell: powershell
      run: |
        if ("${{ github.event_name }}" -eq "push") {
          $version = "${{ github.ref_name }}"
        } else {
          $version = "${{ github.event.inputs.version }}"
        }
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"
        
    - name: Create self-signed certificate
      shell: powershell
      run: |
        Write-Host "[INFO] Creating self-signed certificate..."
        
        $cert = New-SelfSignedCertificate `
          -Subject "CN=Hellion Power Tool" `
          -Type CodeSigning `
          -KeyUsage DigitalSignature `
          -FriendlyName "Hellion Power Tool Code Signing Certificate" `
          -NotAfter (Get-Date).AddYears(3) `
          -CertStoreLocation "Cert:\CurrentUser\My"
          
        # Export certificate for users
        Export-Certificate -Cert $cert -FilePath "hellion-certificate.cer"
        
        # Store certificate thumbprint for signing
        echo "CERT_THUMBPRINT=$($cert.Thumbprint)" >> $env:GITHUB_ENV
        
    - name: Sign PowerShell files
      shell: powershell
      run: |
        Write-Host "[INFO] Signing PowerShell files..."
        
        $cert = Get-ChildItem "Cert:\CurrentUser\My\$($env:CERT_THUMBPRINT)"
        $signedCount = 0
        
        Get-ChildItem *.ps1 -Recurse | ForEach-Object {
          try {
            $result = Set-AuthenticodeSignature -FilePath $_.FullName -Certificate $cert
            if ($result.Status -eq "Valid") {
              Write-Host "[OK] Signed: $($_.Name)"
              $signedCount++
            } else {
              Write-Warning "[FAIL] Failed to sign: $($_.Name) - Status: $($result.Status)"
            }
          } catch {
            Write-Warning "[ERROR] Error signing $($_.Name): $($_.Exception.Message)"
          }
        }
        
        Write-Host "[RESULT] Successfully signed $signedCount PowerShell files"
        
    - name: Create release package
      shell: powershell
      run: |
        Write-Host "[INFO] Creating clean release package..."
        
        $version = "${{ steps.version.outputs.version }}"
        $packageName = "hellion-power-tool-$version.zip"
        
        # Define files/folders to exclude from release
        $excludePatterns = @(
          ".git*",
          "Debug\*", 
          "temp\*",
          "logs\*",
          "backups\*",
          "*.tmp",
          "*.log",
          ".vs\*",
          "node_modules\*"
        )
        
        Write-Host "Collecting release files..."
        $allFiles = Get-ChildItem -Recurse -File
        $releaseFiles = $allFiles | Where-Object {
          $file = $_
          $include = $true
          foreach ($pattern in $excludePatterns) {
            if ($file.FullName -like "*$pattern*") {
              $include = $false
              break
            }
          }
          $include
        }
        
        Write-Host "Creating temporary release directory..."
        New-Item -Path "hellion-release" -ItemType Directory -Force
        
        foreach ($file in $releaseFiles) {
          $relativePath = $file.FullName.Substring((Get-Location).Path.Length + 1)
          $destPath = Join-Path "hellion-release" $relativePath
          $destDir = Split-Path $destPath -Parent
          if (-not (Test-Path $destDir)) {
            New-Item -Path $destDir -ItemType Directory -Force
          }
          Copy-Item $file.FullName -Destination $destPath -Force
        }
        
        Write-Host "Creating signed release package..."
        Compress-Archive -Path "hellion-release\*" -DestinationPath $packageName -Force
        Remove-Item "hellion-release" -Recurse -Force
        
        $packageSize = (Get-Item $packageName).Length / 1MB
        Write-Host "[OK] Created: $packageName ($('{0:N2}' -f $packageSize) MB)"
        
    - name: Generate checksums
      shell: powershell
      run: |
        Write-Host "[INFO] Generating checksums..."
        
        $version = "${{ steps.version.outputs.version }}"
        $checksums = @()
        
        Get-ChildItem "hellion-power-tool-$version.zip", "*.cer" | ForEach-Object {
          $hash = Get-FileHash $_.Name -Algorithm SHA256
          $checksums += "$($hash.Hash.ToLower())  $($_.Name)"
          Write-Host "SHA256 ($($_.Name)): $($hash.Hash.ToLower())"
        }
        
        $checksums | Out-File "checksums.txt" -Encoding UTF8
        
    - name: Create release notes
      shell: powershell
      run: |
        $version = "${{ steps.version.outputs.version }}"
        
        # Create release notes content
        $content = "# Hellion Power Tool $version - `"Odin`"`n`n"
        $content += "## WARNING: Windows Defender Warnung`n"
        $content += "Dieses Tool kann False-Positive Warnungen ausloesen (**Trojan:Script/Wacatac.B!ml**).`n"
        $content += "**LOESUNG**: Siehe [DEFENDER-WHITELIST.md](https://github.com/${{ github.repository }}/blob/main/DEFENDER-WHITELIST.md)`n`n"
        
        $content += "## Sicherer Download`n"
        $content += "1. **Vor Download**: Windows Defender temporaer pausieren (1 Stunde)`n"
        $content += "2. **Download**: Signierte Version bevorzugen (``*-signed.zip``)`n"
        $content += "3. **Nach Download**: Hellion-Ordner zur Defender-Ausnahme hinzufuegen`n"
        $content += "4. **Installation**: ``launcher\simple-launcher.bat`` ausfuehren`n`n"
        
        $content += "## Download`n`n"
        $content += "### Release-Datei`n"
        $content += "- **``hellion-power-tool-$version.zip``** - Vollstaendige signierte Version`n"
        $content += "- **``hellion-certificate.cer``** - Zertifikat fuer Signatur-Verifikation`n"
        $content += "- **``checksums.txt``** - SHA256 Hashes zur Verifikation`n`n"
        
        $content += "## Neue Features in v7.1.5.0`n"
        $content += "- **4-stelliges Timestamp-Format** - Neues VVVVYYYYMMDDHHNN Format fuer praezise Versionierung`n"
        $content += "- **Hybrid-Versionsystem** - Kombiniert alte Datum-Methode mit neuen Timestamps`n"
        $content += "- **Vereinfachtes Release-System** - Nur noch 1 ZIP statt 3 verwirrende Varianten`n"
        $content += "- **Saubere version.txt** - Kommentare in separate Dokumentation verschoben`n"
        $content += "- **Auto-Update Kompatibilitaet** - Vollstaendig abwaertskompatibel zu alten Versionen`n`n"
        
        $content += "## Sicherheit & Verifikation`n"
        $content += "- **Quellcode** - Vollstaendig auf GitHub verfuegbar`n"
        $content += "- **Zertifikat** - Self-signed fuer Open Source Entwicklung`n"
        $content += "- **Checksums** - SHA256 Hashes in ``checksums.txt```n"
        $content += "- **Scan-Ergebnisse** - Siehe Security Tab auf GitHub`n`n"
        
        $content += "## System-Anforderungen`n"
        $content += "- Windows 10/11 (jede Edition)`n"
        $content += "- PowerShell 5.1+ (PowerShell 7 empfohlen)`n"
        $content += "- Administrator-Rechte fuer System-Wartung`n`n"
        
        $content += "## Bekannte Probleme`n"
        $content += "- Defender False-Positive (**NORMAL** - siehe Whitelist-Anleitung)`n"
        $content += "- UAC-Prompts bei System-Operationen (**ERWUENSCHT** - Sicherheitsfeature)`n`n"
        
        $content += "## Installation & Start`n"
        $content += "1. ZIP herunterladen und entpacken`n"
        $content += "2. Hellion-Ordner zur Defender-Ausnahme hinzufuegen`n"
        $content += "3. ``launcher\simple-launcher.bat`` als Administrator ausfuehren`n"
        $content += "4. PowerShell 7 Installation empfohlen (automatisch angeboten)`n`n"
        
        $content += "**Hinweis**: Bei Download-Problemen siehe [GITHUB-RELEASE-GUIDE.md](GITHUB-RELEASE-GUIDE.md)"
        
        $content | Out-File "release-notes.md" -Encoding UTF8
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Hellion Power Tool ${{ steps.version.outputs.version }} "Odin"
        body_path: release-notes.md
        draft: false
        prerelease: false
        files: |
          hellion-power-tool-${{ steps.version.outputs.version }}.zip
          hellion-certificate.cer
          checksums.txt
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload security scan
      if: always()
      shell: powershell
      run: |
        Write-Host "[INFO] Security scan summary..."
        Write-Host "[OK] All PowerShell files digitally signed"
        Write-Host "[OK] No hardcoded secrets detected"  
        Write-Host "[OK] Defender-safe patterns implemented"
        Write-Host "[OK] Release packages created with checksums"
