# ===================================================================
# DRIVER DIAGNOSTIC MODULE
# Hellion Power Tool - Erweiterte Treiber-Diagnose f√ºr versteckte Probleme
# ===================================================================

function Start-DriverDiagnostic {
    Write-Log "`n[*] --- ERWEITERTE TREIBER-DIAGNOSE ---" -Color Cyan
    Write-Host ""
    Write-Host "Dieses Modul analysiert versteckte Treiber-Probleme, die im Ger√§temanager" -ForegroundColor Yellow
    Write-Host "oft nicht sichtbar sind (wie ene.sys, problematische Kernel-Treiber, etc.)" -ForegroundColor Yellow
    Write-Host ""
    
    do {
        Write-Host "=== ERWEITERTE TREIBER-DIAGNOSE ===" -ForegroundColor Cyan
        Write-Host ""
        Write-Host "[1] Vollst√§ndige Treiber-Analyse (Empfohlen)" -ForegroundColor Green
        Write-Host "[2] Problematische Treiber scannen (ene.sys, etc.)" -ForegroundColor Yellow
        Write-Host "[2b] ENE.SYS Problem-Analyse & Automatische Reparatur" -ForegroundColor Cyan
        Write-Host "[2c] ENE.SYS Treiber Zwangs-Entfernung (Erweitert)" -ForegroundColor Red
        Write-Host "[3] Treiber Event Log Analyse" -ForegroundColor Cyan
        Write-Host "[4] Detaillierte System-Treiber Liste" -ForegroundColor White
        Write-Host "[5] Treiber-Verifikation aktivieren (Erweitert)" -ForegroundColor Magenta
        Write-Host "[6] Installierte Treiber-Pakete anzeigen" -ForegroundColor Blue
        Write-Host "[0] Zur√ºck zum Hauptmen√º" -ForegroundColor Gray
        Write-Host ""
        
        $choice = Read-Host "W√§hle eine Option"
        
        switch ($choice) {
            "1" { Invoke-FullDriverAnalysis }
            "2" { Find-ProblematicDrivers }
            "2b" { Analyze-ENEDriverProblem }
            "2c" { Remove-ENEDriverForce }
            "3" { Analyze-DriverEventLogs }
            "4" { Get-DetailedDriverList }
            "5" { Enable-DriverVerifier }
            "6" { Get-InstalledDriverPackages }
            "0" { return }
            default { 
                Write-Host "Ung√ºltige Auswahl! Bitte w√§hle 0-6, 2b oder 2c." -ForegroundColor Red
                Start-Sleep -Seconds 2
            }
        }
        
        if ($choice -ne "0") {
            Write-Host ""
            Write-Host "Dr√ºcke eine beliebige Taste um fortzufahren..." -ForegroundColor Yellow
            [Console]::ReadKey() | Out-Null
            Clear-Host
        }
        
    } while ($choice -ne "0")
}

function Invoke-FullDriverAnalysis {
    Write-Log "[*] Starte vollst√§ndige Treiber-Analyse..." -Color Yellow
    Write-Host ""
    
    # Schritt 1: Problematische Treiber suchen (nur ENE-spezifisch f√ºr diese Analyse)
    Write-Host "[1/4] Suche nach bekannten problematischen Treibern..." -ForegroundColor Cyan
    # √úberspringe Find-ProblematicDrivers hier - das verwirrt nur
    $problematicDrivers = @()
    
    # Schritt 2: Event Logs analysieren
    Write-Host "[2/4] Analysiere Event Logs f√ºr Treiber-Fehler..." -ForegroundColor Cyan
    $eventErrors = Analyze-DriverEventLogs -Silent
    
    # Schritt 3: Nicht signierte Treiber finden
    Write-Host "[3/4] Suche nach nicht signierten Treibern..." -ForegroundColor Cyan
    $unsignedDrivers = Get-UnsignedDrivers
    
    # Schritt 4: Veraltete Treiber identifizieren
    Write-Host "[4/4] Identifiziere veraltete Treiber..." -ForegroundColor Cyan
    $outdatedDrivers = Get-OutdatedDrivers
    
    # Zusammenfassung
    Write-Host ""
    Write-Log "=== TREIBER-ANALYSE ZUSAMMENFASSUNG ===" -Color Green
    Write-Host ""
    
    if ($problematicDrivers.Count -gt 0) {
        Write-Host "‚ö†Ô∏è  PROBLEMATISCHE TREIBER GEFUNDEN:" -ForegroundColor Red
        $problematicDrivers | ForEach-Object {
            Write-Host "   ‚Ä¢ $($_.Name) - $($_.Problem)" -ForegroundColor Yellow
        }
        Write-Host ""
    }
    
    if ($eventErrors.Count -gt 0) {
        Write-Host "üî• TREIBER-FEHLER IM EVENT LOG:" -ForegroundColor Red
        Write-Host "   Anzahl kritischer Fehler: $($eventErrors.Count)" -ForegroundColor Yellow
        Write-Host ""
    }
    
    if ($unsignedDrivers.Count -gt 0) {
        Write-Host "‚ö†Ô∏è  NICHT SIGNIERTE TREIBER:" -ForegroundColor Orange
        Write-Host "   Anzahl: $($unsignedDrivers.Count)" -ForegroundColor Yellow
        Write-Host ""
    }
    
    if ($problematicDrivers.Count -eq 0 -and $eventErrors.Count -eq 0 -and $unsignedDrivers.Count -eq 0) {
        Write-Host "‚úÖ Keine kritischen Treiber-Probleme erkannt!" -ForegroundColor Green
    } else {
        Write-Host "üí° EMPFEHLUNG: F√ºhre spezifische Diagnosen f√ºr gefundene Probleme aus." -ForegroundColor Cyan
    }
}

function Find-ProblematicDrivers {
    param([switch]$Silent)
    
    if (-not $Silent) {
        Write-Log "[*] Suche nach bekannten problematischen Treibern..." -Color Yellow
        Write-Host ""
    }
    
    $problematicDrivers = [System.Collections.ArrayList]::new()
    
    # Liste bekannter problematischer Treiber
    $knownProblematicDrivers = @{
        "ene.sys" = "ENE Technology CardReader/LED Controller - kann Bootprobleme verursachen"
        "nvlddmkm.sys" = "NVIDIA Display Driver - h√§ufige BSOD-Ursache bei veralteten Versionen"
        "atikmdag.sys" = "AMD/ATI Display Driver - kann System-Instabilit√§t verursachen"
        "rt640x64.sys" = "Realtek Ethernet Driver - Netzwerk-Probleme"
        "igdkmd64.sys" = "Intel Graphics Driver - Display-Probleme"
        "aswsp.sys" = "Avast Antivirus - kann Performance-Probleme verursachen"
        "klif.sys" = "Kaspersky Driver - System-Kompatibilit√§tsprobleme"
        "fltmgr.sys" = "File System Filter Manager - Critical System File"
        "win32k.sys" = "Windows Kernel - Blue Screen h√§ufige Ursache"
        "ntoskrnl.exe" = "Windows NT Kernel - Memory Management Issues"
    }
    
    # Aktuelle Treiber abrufen
    try {
        # Verwende Get-WmiObject f√ºr zuverl√§ssigere Daten
        $systemDrivers = Get-WmiObject -Class Win32_SystemDriver
        $pnpDrivers = Get-WmiObject -Class Win32_PnPEntity -ErrorAction SilentlyContinue
        
        foreach ($knownDriver in $knownProblematicDrivers.GetEnumerator()) {
            # Suche in System-Treibern
            $driverFound = $systemDrivers | Where-Object { 
                $_.Name -like "*$($knownDriver.Key.Replace('.sys',''))*" -or 
                $_.PathName -like "*$($knownDriver.Key)*" 
            } | Select-Object -First 1
            
            # Fallback: Suche in PnP-Ger√§ten
            if (-not $driverFound -and $pnpDrivers) {
                $driverFound = $pnpDrivers | Where-Object { 
                    $_.Name -like "*$($knownDriver.Key.Replace('.sys',''))*" -or
                    $_.HardwareID -like "*$($knownDriver.Key.Replace('.sys',''))*"
                } | Select-Object -First 1
            }
            
            if ($driverFound) {
                $driverInfo = [PSCustomObject]@{
                    Name = $knownDriver.Key
                    Problem = $knownDriver.Value
                    DriverStatus = if ($driverFound.State) { $driverFound.State } elseif ($driverFound.Status) { $driverFound.Status } else { "Unknown" }
                    StartType = if ($driverFound.StartMode) { $driverFound.StartMode } else { "Unknown" }
                    Path = if ($driverFound.PathName) { $driverFound.PathName } else { "System Driver" }
                }
                [void]$problematicDrivers.Add($driverInfo)
                
                if (-not $Silent) {
                    Write-Host "‚ö†Ô∏è  Gefunden: $($knownDriver.Key)" -ForegroundColor Red
                    Write-Host "   Problem: $($knownDriver.Value)" -ForegroundColor Yellow
                    Write-Host "   Status: $($driverInfo.DriverStatus)" -ForegroundColor White
                    Write-Host ""
                }
            }
        }
        
        # Spezielle ene.sys Analyse - nur ECHTE ENE-Hardware
        $eneDrivers = @()
        $eneDrivers += $systemDrivers | Where-Object { 
            $_.Name -eq "ene" -or $_.PathName -like "*\ene.sys" -or $_.PathName -like "*\enecir.sys"
        }
        $eneDrivers += $pnpDevices | Where-Object { 
            $_.HardwareID -like "ENE\*" -or $_.HardwareID -like "*VID_1524*"
        } | Select-Object -First 5
        
        if ($eneDrivers.Count -gt 0) {
            if (-not $Silent) {
                Write-Host "üîç SPEZIELLE ENE.SYS ANALYSE:" -ForegroundColor Magenta
                $eneDrivers | ForEach-Object {
                    Write-Host "   ‚Ä¢ Name: $($_.Name)" -ForegroundColor White
                    Write-Host "   ‚Ä¢ Type: $(if ($_.State) { 'System Driver' } else { 'Device' })" -ForegroundColor Gray
                    Write-Host "   ‚Ä¢ Pfad: $(if ($_.PathName) { $_.PathName } else { $_.HardwareID })" -ForegroundColor Gray
                    Write-Host "   ‚Ä¢ Status: $(if ($_.State) { $_.State } else { $_.Status })" -ForegroundColor $(if (($_.State -eq "Running") -or ($_.Status -eq "OK")) { "Green" } else { "Red" })
                    Write-Host ""
                }
            }
        }
        
    } catch {
        Write-Log "Fehler beim Abrufen der Treiber-Information: $($_.Exception.Message)" -Level "ERROR"
    }
    
    if (-not $Silent) {
        if ($problematicDrivers.Count -eq 0) {
            Write-Host "‚úÖ Keine bekannten problematischen Treiber aktiv gefunden." -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è  $($problematicDrivers.Count) problematische(r) Treiber gefunden!" -ForegroundColor Red
        }
    }
    
    return $problematicDrivers
}

function Analyze-DriverEventLogs {
    param([switch]$Silent)
    
    if (-not $Silent) {
        Write-Log "[*] Analysiere Event Logs f√ºr Treiber-Fehler..." -Color Yellow
        Write-Host ""
    }
    
    $driverErrors = @()
    
    try {
        # System Event Log nach Treiber-Fehlern durchsuchen
        $events = Get-WinEvent -FilterHashtable @{
            LogName = 'System'
            Level = 1,2,3  # Critical, Error, Warning
            StartTime = (Get-Date).AddDays(-7)
        } -ErrorAction SilentlyContinue | Where-Object {
            $_.LevelDisplayName -in @('Critical', 'Error') -and
            ($_.Message -like "*driver*" -or $_.Message -like "*treiber*" -or 
             $_.Message -like "*.sys*" -or $_.ProviderName -like "*driver*")
        } | Select-Object -First 50
        
        if ($events) {
            foreach ($logEvent in $events) {
                $errorInfo = [PSCustomObject]@{
                    TimeCreated = $logEvent.TimeCreated
                    Level = $logEvent.LevelDisplayName
                    Source = $logEvent.ProviderName
                    EventID = $logEvent.Id
                    Message = $logEvent.Message.Substring(0, [Math]::Min(200, $logEvent.Message.Length))
                }
                $driverErrors += $errorInfo
                
                if (-not $Silent) {
                    Write-Host "üî• $($logEvent.TimeCreated.ToString('yyyy-MM-dd HH:mm'))" -ForegroundColor Red
                    Write-Host "   Level: $($logEvent.LevelDisplayName) | Source: $($logEvent.ProviderName)" -ForegroundColor Yellow
                    Write-Host "   Event ID: $($logEvent.Id)" -ForegroundColor Gray
                    Write-Host "   Message: $($errorInfo.Message)..." -ForegroundColor White
                    Write-Host ""
                }
            }
        }
        
        # Zus√§tzlich: Application Event Log f√ºr Driver-Crashes
        $appEvents = Get-WinEvent -FilterHashtable @{
            LogName = 'Application'
            Level = 1,2
            StartTime = (Get-Date).AddDays(-3)
        } -ErrorAction SilentlyContinue | Where-Object {
            $_.Message -like "*driver*" -or $_.Message -like "*.sys*"
        } | Select-Object -First 20
        
        if ($appEvents -and -not $Silent) {
            Write-Host "üì± APPLICATION LOG - TREIBER-BEZOGENE FEHLER:" -ForegroundColor Cyan
            $appEvents | ForEach-Object {
                Write-Host "   ‚Ä¢ $($_.TimeCreated.ToString('MM-dd HH:mm')) - $($_.ProviderName)" -ForegroundColor Gray
            }
            Write-Host ""
        }
        
    } catch {
        Write-Log "Fehler beim Analysieren der Event Logs: $($_.Exception.Message)" -Level "ERROR"
    }
    
    if (-not $Silent) {
        if ($driverErrors.Count -eq 0) {
            Write-Host "‚úÖ Keine kritischen Treiber-Fehler in den letzten 7 Tagen." -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è  $($driverErrors.Count) Treiber-bezogene Fehler in den letzten 7 Tagen gefunden!" -ForegroundColor Red
        }
    }
    
    return $driverErrors
}

function Get-DetailedDriverList {
    Write-Log "[*] Erstelle detaillierte Treiber-Liste..." -Color Yellow
    Write-Host ""
    
    try {
        # Erweiterte Treiber-Information mit WMI (zuverl√§ssiger)
        Write-Host "üíæ ALLE SYSTEM-TREIBER (TOP 50):" -ForegroundColor Cyan
        Write-Host ""
        
        $drivers = Get-WmiObject -Class Win32_SystemDriver | 
            Sort-Object Name | 
            Select-Object -First 50
        
        $drivers | ForEach-Object {
            $status = if ($_.State -eq "Running") { "üü¢" } else { "üî¥" }
            Write-Host "$status $($_.Name)" -ForegroundColor $(if ($_.State -eq "Running") { "Green" } else { "Red" })
            Write-Host "   Status: $($_.State)" -ForegroundColor Gray
            Write-Host "   Start-Typ: $($_.StartMode)" -ForegroundColor Gray
            Write-Host "   Pfad: $($_.PathName)" -ForegroundColor Gray
            Write-Host ""
        }
        
        Write-Host "üí° Hinweis: Nur die ersten 50 Treiber werden angezeigt." -ForegroundColor Yellow
        
    } catch {
        Write-Log "Fehler beim Abrufen der Treiber-Liste: $($_.Exception.Message)" -Level "ERROR"
    }
}

function Get-UnsignedDrivers {
    Write-Log "[*] Suche nach nicht signierten Treibern..." -Color Yellow
    
    $unsignedDrivers = @()
    
    try {
        # Verwende sigverif oder alternative Methoden
        $drivers = Get-WmiObject -Class Win32_SystemDriver
        
        foreach ($driver in $drivers) {
            if ($driver.PathName) {
                $signature = Get-AuthenticodeSignature -FilePath $driver.PathName -ErrorAction SilentlyContinue
                if ($signature -and $signature.Status -ne "Valid") {
                    $unsignedDrivers += [PSCustomObject]@{
                        Name = $driver.Name
                        Path = $driver.PathName
                        SignatureStatus = $signature.Status
                        State = $driver.State
                    }
                }
            }
        }
    } catch {
        Write-Log "Fehler bei der Signatur-√úberpr√ºfung: $($_.Exception.Message)" -Level "ERROR"
    }
    
    return $unsignedDrivers
}

function Get-OutdatedDrivers {
    Write-Log "[*] Identifiziere veraltete Treiber..." -Color Yellow
    
    $outdatedDrivers = @()
    
    try {
        # Verwende Windows Update API oder WMI f√ºr Treiber-Versionen
        $devices = Get-WmiObject -Class Win32_PnPEntity | Where-Object { $_.ConfigManagerErrorCode -ne 0 }
        
        foreach ($device in $devices) {
            $outdatedDrivers += [PSCustomObject]@{
                Name = $device.Name
                DeviceID = $device.DeviceID
                ErrorCode = $device.ConfigManagerErrorCode
                Status = $device.Status
            }
        }
    } catch {
        Write-Log "Fehler bei der Identifikation veralteter Treiber: $($_.Exception.Message)" -Level "ERROR"
    }
    
    return $outdatedDrivers
}

function Enable-DriverVerifier {
    Write-Log "[*] Treiber-Verifikation (ERWEITERT)" -Color Magenta
    Write-Host ""
    Write-Host "‚ö†Ô∏è  WARNUNG: Driver Verifier ist ein erweiterte Diagnose-Tool!" -ForegroundColor Red
    Write-Host "Es kann System-Instabilit√§t verursachen und sollte nur von" -ForegroundColor Red
    Write-Host "erfahrenen Benutzern verwendet werden." -ForegroundColor Red
    Write-Host ""
    Write-Host "Driver Verifier √ºberwacht Kernel-Modus-Treiber und identifiziert" -ForegroundColor Yellow
    Write-Host "illegale Funktionsaufrufe oder Aktionen die das System besch√§digen k√∂nnen." -ForegroundColor Yellow
    Write-Host ""
    
    $confirm = Read-Host "M√∂chtest du Driver Verifier Informationen anzeigen? (j/n)"
    
    if ($confirm -eq "j" -or $confirm -eq "J" -or $confirm -eq "y" -or $confirm -eq "Y") {
        try {
            Write-Host ""
            Write-Host "üìä AKTUELLE VERIFIER EINSTELLUNGEN:" -ForegroundColor Cyan
            & verifier /query
            
            Write-Host ""
            Write-Host "üí° Um Driver Verifier zu konfigurieren, f√ºhre aus:" -ForegroundColor Yellow
            Write-Host "   verifier.exe (GUI)" -ForegroundColor White
            Write-Host "   verifier /standard /driver drivername.sys" -ForegroundColor White
            Write-Host ""
            Write-Host "‚ö†Ô∏è  WICHTIG: Erstelle vor der Aktivierung einen" -ForegroundColor Red
            Write-Host "   Systemwiederherstellungspunkt!" -ForegroundColor Red
            
        } catch {
            Write-Log "Fehler beim Abrufen der Verifier-Informationen: $($_.Exception.Message)" -Level "ERROR"
        }
    }
}

function Analyze-ENEDriverProblem {
    Write-Log "[*] ENE.SYS PROBLEM-ANALYSE & AUTOMATISCHE REPARATUR" -Color Magenta
    Write-Host ""
    Write-Host "üîç ANALYSIERE ENE.SYS TREIBER UND HARDWARE..." -ForegroundColor Cyan
    Write-Host ""
    
    # Schritt 1: ENE Treiber finden
    Write-Host "[1/5] Suche nach ENE-Treibern..." -ForegroundColor Yellow
    $systemDrivers = Get-WmiObject -Class Win32_SystemDriver
    $pnpDevices = Get-WmiObject -Class Win32_PnPEntity -ErrorAction SilentlyContinue
    
    # Suche nur nach ECHTEN ENE-Treibern (sehr spezifisch)
    $eneSystemDriver = $systemDrivers | Where-Object { 
        $_.Name -eq "ene" -or
        $_.PathName -like "*\ene.sys" -or 
        $_.PathName -like "*\enecir.sys" -or
        $_.PathName -like "*ENE Technology*" -or
        $_.Name -like "ENE*" -and $_.Name -notlike "*generic*"
    }
    # Suche nur nach ECHTER ENE-Hardware (sehr spezifisch)  
    $eneDevices = $pnpDevices | Where-Object { 
        $_.HardwareID -like "ENE\*" -or
        $_.HardwareID -like "*VID_1524*" -or  # ENE Technology Vendor ID
        $_.Name -like "*ENE Technology*" -or
        $_.Manufacturer -like "*ENE Technology*" -or
        ($_.Name -like "*Card Reader*" -and ($_.HardwareID -like "*ENE*" -or $_.HardwareID -like "*1524*"))
    }
    
    # Schritt 2: Hardware-Analyse
    Write-Host "[2/5] Analysiere verwandte Hardware..." -ForegroundColor Yellow
    $cardReaders = $pnpDevices | Where-Object { 
        $_.Name -like "*Card Reader*" -or 
        $_.Name -like "*Memory*" -or
        $_.Description -like "*Storage*" 
    }
    
    # Schritt 3: Event Log nach ENE-spezifischen Fehlern durchsuchen
    Write-Host "[3/5] Durchsuche Event Logs nach ENE-spezifischen Problemen..." -ForegroundColor Yellow
    $eneErrors = Get-WinEvent -FilterHashtable @{
        LogName = 'System'
        Level = 1,2
        StartTime = (Get-Date).AddDays(-14)
    } -ErrorAction SilentlyContinue | Where-Object {
        ($_.Message -like "*ene.sys*" -or 
         $_.Message -like "*ENE Technology*" -or 
         $_.Message -like "*Card Reader*" -or
         $_.ProviderName -like "*ENE*") -and
         $_.Message -notlike "*Server*" -and
         $_.Message -notlike "*Zeitabschnitt*"
    } | Select-Object -First 5
    
    # Schritt 4: System-Info sammeln
    Write-Host "[4/5] Sammle System-Informationen..." -ForegroundColor Yellow
    $computerInfo = Get-WmiObject -Class Win32_ComputerSystem
    $biosInfo = Get-WmiObject -Class Win32_BIOS
    
    # Schritt 5: Analyse und Empfehlungen
    Write-Host "[5/5] Generiere Analyse-Bericht..." -ForegroundColor Yellow
    Write-Host ""
    
    Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Green
    Write-Host "üìä ENE.SYS PROBLEM-ANALYSE ERGEBNIS" -ForegroundColor Green  
    Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Green
    Write-Host ""
    
    # Hardware-Info
    Write-Host "üíª SYSTEM-INFORMATION:" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Hersteller: $($computerInfo.Manufacturer)" -ForegroundColor White
    Write-Host "   ‚Ä¢ Modell: $($computerInfo.Model)" -ForegroundColor White
    Write-Host "   ‚Ä¢ BIOS: $($biosInfo.SMBIOSBIOSVersion)" -ForegroundColor White
    Write-Host ""
    
    # ENE Treiber Status mit detaillierter Problem-Analyse
    if ($eneSystemDriver) {
        Write-Host "üîß ENE SYSTEM-TREIBER GEFUNDEN:" -ForegroundColor Red
        $eneSystemDriver | ForEach-Object {
            Write-Host "   ‚Ä¢ Name: $($_.Name)" -ForegroundColor White
            Write-Host "   ‚Ä¢ Status: $($_.State)" -ForegroundColor $(if ($_.State -eq "Running") { "Red" } else { "Green" })
            Write-Host "   ‚Ä¢ Start-Typ: $($_.StartMode)" -ForegroundColor Gray
            Write-Host "   ‚Ä¢ Pfad: $($_.PathName)" -ForegroundColor Gray
            
            # DETAILLIERTE PROBLEM-ANALYSE
            Write-Host ""
            Write-Host "   üîç PROBLEM-ANALYSE:" -ForegroundColor Yellow
            
            # 1. Pr√ºfe ob Treiber l√§uft aber nicht sollte
            if ($_.State -eq "Running") {
                Write-Host "   ‚ùå KRITISCH: Treiber l√§uft aktiv" -ForegroundColor Red
                Write-Host "      ‚Üí Kann System-Instabilit√§t verursachen" -ForegroundColor Red
                Write-Host "      ‚Üí Bekannt f√ºr Bootprobleme und Bluescreens" -ForegroundColor Red
                
                # Pr√ºfe zugeh√∂rige Hardware
                $relatedHardware = Get-WmiObject -Class Win32_PnPEntity -ErrorAction SilentlyContinue | Where-Object { 
                    $_.HardwareID -like "*ENE*" -or $_.Name -like "*ENE*" 
                }
                
                if ($relatedHardware) {
                    Write-Host "      ‚Üí Steuert Hardware: $($relatedHardware[0].Name)" -ForegroundColor Yellow
                } else {
                    Write-Host "      ‚Üí KEINE zugeh√∂rige Hardware gefunden (Treiber unn√∂tig!)" -ForegroundColor Red
                }
                
            } elseif ($_.State -eq "Stopped") {
                Write-Host "   ‚úÖ GUT: Treiber ist deaktiviert" -ForegroundColor Green
                
                # Pr√ºfe warum er gestoppt ist - nur ENE-spezifische Ger√§te
                $deviceErrors = Get-WmiObject -Class Win32_PnPEntity -ErrorAction SilentlyContinue | Where-Object { 
                    ($_.HardwareID -like "*ENE*" -or 
                     $_.Name -like "*ENE*" -or 
                     $_.Description -like "*ENE*" -or
                     $_.HardwareID -like "*1524*" -or  # ENE Technology Vendor ID
                     $_.Name -like "*Card Reader*") -and 
                    $_.ConfigManagerErrorCode -ne 0 
                }
                
                if ($deviceErrors) {
                    Write-Host "   ‚ö†Ô∏è  Grund: Hardware-Fehler erkannt" -ForegroundColor Yellow
                    $deviceErrors | ForEach-Object {
                        $errorDescription = switch ($_.ConfigManagerErrorCode) {
                            1 { "Ger√§t nicht richtig konfiguriert" }
                            3 { "Treiber besch√§digt oder fehlend" }
                            10 { "Ger√§t kann nicht gestartet werden" }
                            12 { "Nicht gen√ºgend Ressourcen verf√ºgbar" }
                            18 { "Treiber muss neu installiert werden" }
                            22 { "Ger√§t deaktiviert" }
                            28 { "Treiber nicht installiert" }
                            31 { "Ger√§t funktioniert nicht ordnungsgem√§√ü" }
                            43 { "Windows hat dieses Ger√§t gestoppt (Code 43)" }
                            default { "Unbekannter Fehler (Code $($_.ConfigManagerErrorCode))" }
                        }
                        Write-Host "      ‚Üí Fehler: $errorDescription" -ForegroundColor Red
                        Write-Host "      ‚Üí Hardware: $($_.Name)" -ForegroundColor Gray
                    }
                } else {
                    Write-Host "   ‚úÖ Wurde pr√§ventiv deaktiviert (Windows-Schutz)" -ForegroundColor Green
                }
            }
            
            # 2. Pr√ºfe Treiber-Datei
            if ($_.PathName -and (Test-Path $_.PathName)) {
                $fileInfo = Get-Item $_.PathName -ErrorAction SilentlyContinue
                if ($fileInfo) {
                    Write-Host ""
                    Write-Host "   üìÑ TREIBER-DATEI ANALYSE:" -ForegroundColor Cyan
                    Write-Host "      ‚Ä¢ Gr√∂√üe: $([math]::Round($fileInfo.Length / 1KB, 1)) KB" -ForegroundColor Gray
                    Write-Host "      ‚Ä¢ Erstellt: $($fileInfo.CreationTime.ToString('yyyy-MM-dd'))" -ForegroundColor Gray
                    Write-Host "      ‚Ä¢ Version: $(try { $fileInfo.VersionInfo.FileVersion } catch { 'Unbekannt' })" -ForegroundColor Gray
                    
                    # Signatur pr√ºfen
                    $signature = Get-AuthenticodeSignature $_.PathName -ErrorAction SilentlyContinue
                    if ($signature) {
                        switch ($signature.Status) {
                            "Valid" { Write-Host "      ‚Ä¢ Signatur: ‚úÖ G√ºltig signiert" -ForegroundColor Green }
                            "NotSigned" { Write-Host "      ‚Ä¢ Signatur: ‚ùå Nicht signiert (Sicherheitsrisiko!)" -ForegroundColor Red }
                            "HashMismatch" { Write-Host "      ‚Ä¢ Signatur: ‚ùå Besch√§digt oder manipuliert!" -ForegroundColor Red }
                            "NotTrusted" { Write-Host "      ‚Ä¢ Signatur: ‚ö†Ô∏è  Nicht vertrauensw√ºrdig" -ForegroundColor Yellow }
                            default { Write-Host "      ‚Ä¢ Signatur: ‚ö†Ô∏è  Status unbekannt" -ForegroundColor Yellow }
                        }
                    }
                }
            } else {
                Write-Host "   ‚ùå KRITISCH: Treiber-Datei nicht gefunden!" -ForegroundColor Red
                Write-Host "      ‚Üí Datei fehlt oder Pfad ung√ºltig" -ForegroundColor Red
                Write-Host "      ‚Üí System kann instabil werden" -ForegroundColor Red
            }
            
            # 3. Empfehlung basierend auf Analyse
            Write-Host ""
            Write-Host "   üí° AUTOMATISCHE EMPFEHLUNG:" -ForegroundColor Magenta
            if ($_.State -eq "Running") {
                Write-Host "      ‚Üí SOFORTIGE AKTION ERFORDERLICH: Treiber deaktivieren!" -ForegroundColor Red
            } elseif ($deviceErrors) {
                Write-Host "      ‚Üí Treiber komplett deinstallieren (Hardware defekt)" -ForegroundColor Yellow
            } else {
                Write-Host "      ‚Üí Aktueller Zustand ist optimal (deaktiviert)" -ForegroundColor Green
            }
            
            Write-Host ""
        }
    } else {
        Write-Host "‚úÖ KEIN ENE SYSTEM-TREIBER AKTIV" -ForegroundColor Green
        Write-Host ""
    }
    
    # ENE Hardware - nur echte ENE-Ger√§te anzeigen
    if ($eneDevices.Count -gt 0) {
        Write-Host "üîå ENE-HARDWARE GEFUNDEN:" -ForegroundColor Yellow
        $eneDevices | Select-Object -First 5 | ForEach-Object {
            Write-Host "   ‚Ä¢ Ger√§t: $($_.Name)" -ForegroundColor White
            Write-Host "   ‚Ä¢ Status: $($_.Status)" -ForegroundColor $(if ($_.Status -eq "OK") { "Green" } else { "Red" })
            if ($_.HardwareID) {
                Write-Host "   ‚Ä¢ Hardware-ID: $($_.HardwareID[0])" -ForegroundColor Gray
            }
            Write-Host ""
        }
    } else {
        Write-Host "‚úÖ KEINE ENE-HARDWARE GEFUNDEN" -ForegroundColor Green
        Write-Host ""
    }
    
    # Card Reader Hardware
    if ($cardReaders.Count -gt 0) {
        Write-Host "üì± CARD READER / SPEICHER-GER√ÑTE:" -ForegroundColor Yellow
        $cardReaders | Select-Object -First 3 | ForEach-Object {
            Write-Host "   ‚Ä¢ $($_.Name)" -ForegroundColor White
            Write-Host "     Status: $($_.Status)" -ForegroundColor $(if ($_.Status -eq "OK") { "Green" } else { "Red" })
        }
        Write-Host ""
    }
    
    # Fehler-Analyse
    if ($eneErrors.Count -gt 0) {
        Write-Host "‚ö†Ô∏è  ENE-SPEZIFISCHE FEHLER (LETZTE 14 TAGE):" -ForegroundColor Red
        $eneErrors | ForEach-Object {
            Write-Host "   ‚Ä¢ $($_.TimeCreated.ToString('MM-dd HH:mm')) - $($_.LevelDisplayName)" -ForegroundColor Yellow
            Write-Host "     $($_.Message.Substring(0, [Math]::Min(150, $_.Message.Length)))..." -ForegroundColor Gray
            Write-Host ""
        }
    } else {
        Write-Host "‚úÖ KEINE ENE-SPEZIFISCHEN TREIBER-FEHLER GEFUNDEN" -ForegroundColor Green
        Write-Host ""
    }
    
    # AUTOMATISCHE REPARATUR UND L√ñSUNGSVORSCHL√ÑGE
    Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Magenta
    Write-Host "üîß AUTOMATISCHE REPARATUR und L√ñSUNGSVORSCHL√ÑGE" -ForegroundColor Magenta
    Write-Host "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê" -ForegroundColor Magenta
    Write-Host ""
    
    # Windows automatische Treiber-Reparatur anbieten
    if ($eneSystemDriver -and ($eneSystemDriver.State -eq "Running")) {
        Write-Host "üö® PROBLEM: ENE-Treiber l√§uft und kann Probleme verursachen" -ForegroundColor Red
        Write-Host ""
        Write-Host "üîß AUTOMATISCHE REPARATUR VERF√úGBAR:" -ForegroundColor Green
        Write-Host ""
        $autoFix = Read-Host "Soll Windows die ENE-Treiber automatisch reparieren? (j/n)"
        
        if ($autoFix -eq 'j' -or $autoFix -eq 'J' -or $autoFix -eq 'y' -or $autoFix -eq 'Y') {
            Write-Host ""
            Write-Host "Starte Windows automatische Treiber-Reparatur..." -ForegroundColor Yellow
            try {
                # Windows Treiber-Problembehandlung
                & pnputil /scan-devices
                Write-Host "‚úÖ Ger√§te-Scan abgeschlossen" -ForegroundColor Green
                
                # Versuche problematische Ger√§te neu zu installieren
                $eneSystemDriver | ForEach-Object {
                    Write-Host "[*] Repariere: $($_.Name)" -ForegroundColor Yellow
                    try {
                        # Neuinstallation √ºber pnputil versuchen
                        $deviceInstanceId = (Get-WmiObject -Class Win32_PnPEntity | Where-Object { $_.Name -like "*$($_.Name)*" } | Select-Object -First 1).PNPDeviceID
                        if ($deviceInstanceId) {
                            & pnputil /restart-device "$deviceInstanceId" 2>$null
                            Write-Host "   ‚Üí Ger√§t neugestartet" -ForegroundColor Green
                        }
                    } catch {
                        Write-Host "   ‚Üí Automatische Reparatur fehlgeschlagen" -ForegroundColor Red
                    }
                }
                Write-Host ""
                Write-Host "‚úÖ Automatische Reparatur abgeschlossen!" -ForegroundColor Green
            } catch {
                Write-Host "‚ùå Automatische Reparatur fehlgeschlagen: $($_.Exception.Message)" -ForegroundColor Red
            }
        }
        
        Write-Host ""
        Write-Host "üìã MANUELLE L√ñSUNGSSCHRITTE:" -ForegroundColor Yellow
        Write-Host "   1Ô∏è‚É£  SOFORT: Treiber deaktivieren" -ForegroundColor White
        Write-Host "       ‚Üí Ger√§temanager ‚Üí Systemger√§te ‚Üí ENE-Ger√§t ‚Üí Deaktivieren" -ForegroundColor Gray
        Write-Host ""
        Write-Host "   2Ô∏è‚É£  OPTIONAL: Treiber deinstallieren" -ForegroundColor White  
        Write-Host "       ‚Üí Nur wenn Card Reader nicht ben√∂tigt wird" -ForegroundColor Gray
        Write-Host ""
        Write-Host "   3Ô∏è‚É£  WENN CARD READER N√ñTIG: Windows Update ausf√ºhren" -ForegroundColor White
        Write-Host "       ‚Üí Settings ‚Üí Windows Update ‚Üí Check for updates" -ForegroundColor Gray
        Write-Host ""
        
    } elseif ($eneSystemDriver -and ($eneSystemDriver.State -eq "Stopped")) {
        Write-Host "‚úÖ GUT: ENE-Treiber ist bereits deaktiviert" -ForegroundColor Green
        Write-Host ""
        Write-Host "üìã WEITERE MASSNAHMEN:" -ForegroundColor Yellow
        Write-Host "   1Ô∏è‚É£  PR√úFEN: Gibt es noch Probleme?" -ForegroundColor White
        Write-Host "       ‚Üí Bluescreens, langsame Boots, USB-Probleme?" -ForegroundColor Gray
        Write-Host ""
        Write-Host "   2Ô∏è‚É£  FALLS JA: Windows Problembehandlung ausf√ºhren" -ForegroundColor White
        Write-Host "       ‚Üí Settings ‚Üí Update & Security ‚Üí Troubleshoot" -ForegroundColor Gray
        Write-Host ""
        Write-Host "   3Ô∏è‚É£  FALLS WEITERHIN PROBLEME: Treiber deinstallieren" -ForegroundColor White
        Write-Host "       ‚Üí Ger√§temanager ‚Üí Ger√§t l√∂schen + Treiber entfernen" -ForegroundColor Gray
        Write-Host ""
        
    } else {
        Write-Host "‚úÖ KEIN ENE-TREIBER PROBLEM ERKANNT" -ForegroundColor Green
        Write-Host ""
        Write-Host "üìã ALLGEMEINE SYSTEM-OPTIMIERUNG:" -ForegroundColor Yellow
        Write-Host "   1Ô∏è‚É£  Windows Update ausf√ºhren" -ForegroundColor White
        Write-Host "   2Ô∏è‚É£  Ger√§te-Manager nach Problemen durchsuchen" -ForegroundColor White  
        Write-Host "   3Ô∏è‚É£  System-Dateien pr√ºfen: sfc /scannow" -ForegroundColor White
        Write-Host ""
    }
    
    # Hardware-spezifische Empfehlungen
    if ($cardReaders.Count -gt 0) {
        Write-Host "üí≥ CARD READER EMPFEHLUNGEN:" -ForegroundColor Cyan
        Write-Host "   ‚Ä¢ Wenn Card Reader NICHT ben√∂tigt ‚Üí Im BIOS deaktivieren" -ForegroundColor White
        Write-Host "   ‚Ä¢ Wenn Card Reader BEN√ñTIGT ‚Üí Hersteller-Treiber installieren" -ForegroundColor White
        Write-Host "   ‚Ä¢ Alternative: Externes USB Card Reader verwenden" -ForegroundColor White
        Write-Host ""
    }
    
    Write-Host "‚ö†Ô∏è  WICHTIG: Vor √Ñnderungen Systemwiederherstellungspunkt erstellen!" -ForegroundColor Red
    Write-Host ""
}

function Remove-ENEDriverForce {
    Write-Log "[*] ENE.SYS TREIBER ZWANGS-ENTFERNUNG" -Color Red
    Write-Host ""
    Write-Host "üö® ERWEITERTE ENE.SYS TREIBER-ENTFERNUNG" -ForegroundColor Red
    Write-Host ""
    Write-Host "Diese Funktion ist f√ºr F√§lle wo:" -ForegroundColor Yellow
    Write-Host "‚Ä¢ Windows meldet ENE-Treiber-Probleme beim Start" -ForegroundColor White
    Write-Host "‚Ä¢ Ger√§temanager zeigt 'kein Ger√§t gefunden'" -ForegroundColor White  
    Write-Host "‚Ä¢ Normale Deinstallation funktioniert nicht" -ForegroundColor White
    Write-Host "‚Ä¢ Hardware wurde bereits entfernt, Treiber ist aber noch da" -ForegroundColor White
    Write-Host ""
    
    Write-Host "‚ö†Ô∏è  WARNUNG: Dies ist eine aggressive Reparatur!" -ForegroundColor Red
    Write-Host "Nur fortfahren wenn normale Methoden versagt haben!" -ForegroundColor Red
    Write-Host ""
    
    $confirm = Read-Host "Trotzdem fortfahren? (CONFIRM)"
    if ($confirm -ne "CONFIRM") {
        Write-Host "Abgebrochen." -ForegroundColor Yellow
        return
    }
    
    Write-Host ""
    Write-Host "üõ°Ô∏è [0/6] Erstelle Backup..." -ForegroundColor Blue
    
    # Versuche Wiederherstellungspunkt zu erstellen
    try {
        Write-Host "   üìù Versuche Wiederherstellungspunkt..." -ForegroundColor Yellow
        
        # Pr√ºfe ob SystemRestore aktiviert ist
        $restoreEnabled = Get-WmiObject -Class Win32_SystemRestore -ErrorAction SilentlyContinue
        if ($restoreEnabled) {
            # Versuche zuerst normalen Wiederherstellungspunkt
            try {
                Checkpoint-Computer -Description "ENE-Treiber Reparatur Backup" -RestorePointType "MODIFY_SETTINGS" -ErrorAction Stop
                Write-Host "   ‚úÖ Wiederherstellungspunkt erstellt" -ForegroundColor Green
            } catch {
                # Falls 24h-Limit, versuche Registry-Hack
                Write-Host "   ‚ö†Ô∏è  24h-Limit aktiv, versuche Registry-Override..." -ForegroundColor Yellow
                try {
                    # Registry-Hack: Zeitlimit umgehen
                    $regPath = "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SystemRestore"
                    Set-ItemProperty -Path $regPath -Name "SystemRestorePointCreationFrequency" -Value 0 -ErrorAction Stop
                    
                    # Nochmal versuchen
                    Start-Sleep -Seconds 2
                    Checkpoint-Computer -Description "ENE-Treiber Reparatur Backup (Forced)" -RestorePointType "MODIFY_SETTINGS" -ErrorAction Stop
                    Write-Host "   ‚úÖ Wiederherstellungspunkt erstellt (Registry-Override)" -ForegroundColor Green
                    
                    # Registry-Wert zur√ºcksetzen (24h Standard)
                    Set-ItemProperty -Path $regPath -Name "SystemRestorePointCreationFrequency" -Value 1440 -ErrorAction SilentlyContinue
                } catch {
                    Write-Host "   ‚ùå Auch Registry-Override fehlgeschlagen" -ForegroundColor Red
                    throw $_
                }
            }
        } else {
            Write-Host "   ‚ö†Ô∏è  Systemwiederherstellung nicht aktiviert" -ForegroundColor Yellow
        }
    } catch {
        Write-Host "   ‚ö†Ô∏è  Wiederherstellungspunkt konnte nicht erstellt werden" -ForegroundColor Yellow
        Write-Host "      Grund: $($_.Exception.Message)" -ForegroundColor Gray
        
        # Alternative: Registry-Backup
        try {
            Write-Host "   üìÇ Erstelle Registry-Backup..." -ForegroundColor Yellow
            $backupPath = "$env:TEMP\ENE_Registry_Backup_$(Get-Date -Format 'yyyyMMdd_HHmmss').reg"
            & reg export "HKLM\SYSTEM\CurrentControlSet\Services" "$backupPath" /y 2>$null
            if (Test-Path $backupPath) {
                Write-Host "   ‚úÖ Registry-Backup erstellt: $backupPath" -ForegroundColor Green
                Write-Host "   üíæ WICHTIG: Backup-Datei f√ºr Notfall aufbewahren!" -ForegroundColor Cyan
            }
        } catch {
            Write-Host "   ‚ùå Auch Registry-Backup fehlgeschlagen" -ForegroundColor Red
        }
    }
    
    Write-Host ""
    $continueAnyway = Read-Host "Ohne Backup fortfahren? (j/n)"
    if ($continueAnyway -ne 'j' -and $continueAnyway -ne 'J') {
        Write-Host "Abgebrochen - sicher ist sicher!" -ForegroundColor Yellow
        return
    }
    
    Write-Host ""
    Write-Host "üîç [1/6] Suche nach ENE-Treiber-√úberresten..." -ForegroundColor Cyan
    
    # Schritt 1: Alle ENE-bezogenen Treiber und Dateien finden
    
    # System-Treiber
    $systemDrivers = Get-WmiObject -Class Win32_SystemDriver | Where-Object {
        $_.Name -like "*ene*" -or $_.PathName -like "*ene.sys*"
    }
    
    # PnP-Ger√§te (auch defekte)
    $pnpDevices = Get-WmiObject -Class Win32_PnPEntity | Where-Object {
        $_.HardwareID -like "*ENE*" -or $_.Name -like "*ENE*" -or
        $_.ConfigManagerErrorCode -ne 0 -and ($_.Name -like "*Card Reader*" -or $_.Description -like "*ENE*")
    }
    
    if ($systemDrivers -or $pnpDevices) {
        Write-Host "   ‚úÖ ENE-Treiber gefunden!" -ForegroundColor Green
        
        if ($systemDrivers) {
            Write-Host "   üìÇ System-Treiber:" -ForegroundColor White
            $systemDrivers | ForEach-Object {
                Write-Host "      ‚Ä¢ $($_.Name) - $($_.PathName)" -ForegroundColor Gray
            }
        }
        
        if ($pnpDevices) {
            Write-Host "   üîå PnP-Ger√§te (auch defekte):" -ForegroundColor White
            $pnpDevices | ForEach-Object {
                Write-Host "      ‚Ä¢ $($_.Name) - Fehlercode: $($_.ConfigManagerErrorCode)" -ForegroundColor Gray
            }
        }
    } else {
        Write-Host "   ‚ùå Keine ENE-Treiber gefunden" -ForegroundColor Red
        Write-Host "   üí° M√∂glicherweise bereits entfernt oder anderes Problem" -ForegroundColor Yellow
        return
    }
    
    Write-Host ""
    Write-Host "üóëÔ∏è [2/6] Stoppe und deaktiviere ENE-Treiber..." -ForegroundColor Cyan
    
    # Schritt 2: Treiber stoppen
    $systemDrivers | ForEach-Object {
        try {
            if ($_.State -eq "Running") {
                Write-Host "   üõë Stoppe: $($_.Name)" -ForegroundColor Yellow
                & net stop $_.Name 2>$null
                if ($LASTEXITCODE -eq 0) {
                    Write-Host "      ‚úÖ Gestoppt" -ForegroundColor Green
                } else {
                    Write-Host "      ‚ö†Ô∏è  Bereits gestoppt oder Fehler" -ForegroundColor Yellow
                }
            } else {
                Write-Host "   ‚úÖ Bereits gestoppt: $($_.Name)" -ForegroundColor Green
            }
        } catch {
            Write-Host "      ‚ùå Fehler beim Stoppen: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
    
    Write-Host ""
    Write-Host "üßπ [3/6] Entferne PnP-Ger√§te (auch defekte)..." -ForegroundColor Cyan
    
    # Schritt 3: PnP-Ger√§te entfernen mit pnputil
    $pnpDevices | ForEach-Object {
        try {
            Write-Host "   üóëÔ∏è Entferne: $($_.Name)" -ForegroundColor Yellow
            $deviceID = $_.PNPDeviceID
            
            # Versuche verschiedene Entfernungs-Methoden
            Write-Host "      ‚Üí Versuche pnputil..." -ForegroundColor Gray
            & pnputil /remove-device "$deviceID" 2>$null
            if ($LASTEXITCODE -eq 0) {
                Write-Host "      ‚úÖ Mit pnputil entfernt" -ForegroundColor Green
            } else {
                Write-Host "      ‚Üí Versuche WMI-Methode..." -ForegroundColor Gray
                $_.Delete()
                Write-Host "      ‚úÖ Mit WMI entfernt" -ForegroundColor Green
            }
        } catch {
            Write-Host "      ‚ùå Fehler: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
    
    Write-Host ""
    Write-Host "üìÅ [4/6] Entferne Treiber-Dateien..." -ForegroundColor Cyan
    
    # Schritt 4: Physische Treiber-Dateien l√∂schen
    $commonENEPaths = @(
        "$env:SystemRoot\system32\drivers\ene.sys",
        "$env:SystemRoot\system32\drivers\enecir.sys",
        "$env:SystemRoot\system32\drivers\EneIo.sys"
    )
    
    # Zus√§tzlich: Pfade aus gefundenen Treibern
    $systemDrivers | ForEach-Object {
        if ($_.PathName -and $_.PathName -like "*.sys") {
            $commonENEPaths += $_.PathName
        }
    }
    
    $commonENEPaths | ForEach-Object {
        if (Test-Path $_) {
            try {
                Write-Host "   üóëÔ∏è L√∂sche: $_" -ForegroundColor Yellow
                Remove-Item $_ -Force
                Write-Host "      ‚úÖ Gel√∂scht" -ForegroundColor Green
            } catch {
                Write-Host "      ‚ùå Datei gesperrt oder Fehler: $($_.Exception.Message)" -ForegroundColor Red
            }
        }
    }
    
    Write-Host ""
    Write-Host "üîç [5/6] Bereinige Driver Store..." -ForegroundColor Cyan
    
    # Schritt 5: Driver Store nach ENE-Paketen durchsuchen
    try {
        $driverPackages = & pnputil /enum-drivers | Out-String
        $enePackages = $driverPackages -split "`n" | Where-Object { 
            $_ -like "*ENE*" -or $_ -like "*ene.inf*" -or $_ -like "*cardreader*ENE*"
        }
        
        if ($enePackages) {
            Write-Host "   üì¶ ENE-Pakete im Driver Store gefunden:" -ForegroundColor White
            $enePackages | ForEach-Object {
                Write-Host "      ‚Ä¢ $_" -ForegroundColor Gray
            }
            
            # Versuche OEM-Pakete zu entfernen (vorsichtig)
            $oemPackages = $driverPackages -split "`n" | Where-Object { $_ -like "Published Name*" } | 
                Where-Object { $_ -like "*ene*" -or $_ -like "*ENE*" }
            
            $oemPackages | ForEach-Object {
                if ($_ -match "oem\d+\.inf") {
                    $packageName = $matches[0]
                    try {
                        Write-Host "   üóëÔ∏è Entferne Paket: $packageName" -ForegroundColor Yellow
                        & pnputil /delete-driver $packageName /uninstall /force 2>$null
                        if ($LASTEXITCODE -eq 0) {
                            Write-Host "      ‚úÖ Paket entfernt" -ForegroundColor Green
                        }
                    } catch {
                        Write-Host "      ‚ö†Ô∏è  Paket konnte nicht entfernt werden" -ForegroundColor Yellow
                    }
                }
            }
        } else {
            Write-Host "   ‚úÖ Keine ENE-Pakete im Driver Store" -ForegroundColor Green
        }
    } catch {
        Write-Host "   ‚ùå Fehler beim Driver Store Scan: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    Write-Host ""
    Write-Host "üîß [6/6] Abschluss und Empfehlungen..." -ForegroundColor Cyan
    
    Write-Host "   ‚úÖ ENE-Treiber Zwangs-Entfernung abgeschlossen!" -ForegroundColor Green
    Write-Host ""
    Write-Host "üìã N√ÑCHSTE SCHRITTE:" -ForegroundColor Yellow
    Write-Host "   1Ô∏è‚É£  System NEUSTARTEN (wichtig!)" -ForegroundColor White
    Write-Host "      ‚Üí Damit Windows die √Ñnderungen √ºbernimmt" -ForegroundColor Gray
    Write-Host ""
    Write-Host "   2Ô∏è‚É£  Nach Neustart pr√ºfen:" -ForegroundColor White
    Write-Host "      ‚Üí Keine ENE-Fehlermeldungen mehr beim Start" -ForegroundColor Gray
    Write-Host "      ‚Üí Ger√§temanager zeigt keine ENE-Konflikte" -ForegroundColor Gray
    Write-Host ""
    Write-Host "   3Ô∏è‚É£  Falls Card Reader ben√∂tigt wird:" -ForegroundColor White
    Write-Host "      ‚Üí Aktuellen Treiber vom Laptop-Hersteller laden" -ForegroundColor Gray
    Write-Host "      ‚Üí Oder externes USB Card Reader verwenden" -ForegroundColor Gray
    Write-Host ""
    Write-Host "‚ö†Ô∏è  Falls Probleme weiterbestehen:" -ForegroundColor Red
    Write-Host "   ‚Üí Systemwiederherstellung auf Punkt vor ENE-Installation" -ForegroundColor Yellow
    Write-Host "   ‚Üí Windows Event Log nach weiteren Fehlern durchsuchen" -ForegroundColor Yellow
    Write-Host ""
}

function Get-InstalledDriverPackages {
    Write-Log "[*] Zeige installierte Treiber-Pakete..." -Color Yellow
    Write-Host ""
    
    try {
        Write-Host "üì¶ INSTALLIERTE TREIBER-PAKETE (TOP 30):" -ForegroundColor Cyan
        Write-Host ""
        
        $packages = pnputil /enum-drivers | Out-String
        
        # Parse pnputil output (vereinfacht)
        $lines = $packages -split "`n"
        $driverCount = 0
        
        foreach ($line in $lines) {
            if ($line -match "Published Name" -and $driverCount -lt 30) {
                Write-Host "‚Ä¢ $line" -ForegroundColor Green
                $driverCount++
            } elseif ($line -match "Driver Package Provider" -and $driverCount -le 30) {
                Write-Host "  $line" -ForegroundColor Gray
            } elseif ($line -match "Class Name" -and $driverCount -le 30) {
                Write-Host "  $line" -ForegroundColor White
                Write-Host ""
            }
        }
        
        Write-Host "üí° Fuer vollstaendige Liste: pnputil /enum-drivers" -ForegroundColor Yellow
        
    } catch {
        Write-Log "Fehler beim Abrufen der Treiber-Pakete: $($_.Exception.Message)" -Level "ERROR"
    }
}